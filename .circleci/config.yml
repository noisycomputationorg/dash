version: 2.1
commands:
  save_cache_cmd:
    steps:
      - save_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}
          paths:
              - venv

  restore_cache_cmd:
    steps:
      - restore_cache:
          key: dep-{{ checksum ".circleci/config.yml" }}-{{ checksum "ver.txt" }}-{{ checksum "requires-dev.txt" }}-{{ checksum "requires-install.txt" }}-{{ checksum "requires-testing.txt" }}

  requires_install_remove_dash_cmd:
    steps:
      - run:
          name: remove dash from requires-install.txt
          command: sed -i 's/^dash/#dash/' requires-install.txt

  requires_install_restore_dash_cmd:
    steps:
      - run:
          name: restore dash to requires-install.txt
          command: sed -i 's/^#dash/dash/' requires-install.txt

  build_core_dev_requirements_cmd:
    steps:
      - requires_install_remove_dash_cmd
      - run:
          name: ️️🏗️ build core dev requirements
          command: |
            python -m venv venv && source venv/bin/activate
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off

            # dash-renderer needs to be installed in the venv in order to run the `renderer` tool
            cd dash-renderer && npm ci && pip install -e . --no-cache-dir --progress-bar off && cd ..
      - requires_install_restore_dash_cmd

  install_built_packages_cmd:
    steps:
      - run:
          name: ️️🏗️  Install built packages
          command: |
            rm -rf venv && python -m venv venv && source venv/bin/activate
            npm install --production
            cd packages && ls -la

            # Install all except dash proper
            find . -type f \( -name "dash*.gz" ! -name "dash?[0-9]*.gz" \) | xargs pip install --no-cache-dir --ignore-installed --progress-bar off

            # Install dash package only to test if it installs...
            find . -name "dash*.gz" | xargs pip install --no-cache-dir --progress-bar off && cd ..

            # ...because for testing we need to install in editable mode from the source directory,
            # which uninstalls the sdist. Among other things, this adds the current working
            # directory to sys.path, which is needed for some unit tests
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
            pip list | grep dash


jobs:
  percy-finalize:
    docker:
      - image: percyio/agent
    steps:
      - run: percy finalize --all


  artifacts:
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PYVERSION: python37
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - attach_workspace:
          at: ~/dash
      - run: cd ~/dash/packages && tar cvf dash-packages.tar *tar.gz && cd ~
      - store_artifacts:
          path: ~/dash/packages
          destination: /tmp/packages


  build-core-37: &build-core
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PYLINTRC: .pylintrc37
          PYVERSION: python37
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache_cmd
      - build_core_dev_requirements_cmd
      - requires_install_remove_dash_cmd
      - run:
          name: ️️🏗️ build core dash-renderer
          command: |
              source venv/bin/activate && pip install --no-cache-dir --upgrade -e . --progress-bar off && mkdir packages
              cd dash-renderer && renderer build && python setup.py sdist && mv dist/* ../packages/ && cd ..
              ls -la packages
      - requires_install_restore_dash_cmd
      - run:
          name: ️️🏗️ build core dash
          command: |
              source venv/bin/activate
              python setup.py sdist && mv dist/* packages/
              ls -la packages
      - save_cache_cmd
      - persist_to_workspace:
          root: ~/dash
          paths:
            - packages/*.tar.gz


  build-misc-37: &build-misc
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PYVERSION: python37
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - restore_cache_cmd
      - requires_install_remove_dash_cmd
      - run:
          name: ️️🏗️ build misc
          command: |
              source venv/bin/activate && pip install --no-cache-dir --upgrade -e . --progress-bar off && mkdir packages

              git clone https://github.com/plotly/dash-core-components.git
              cd dash-core-components && git checkout v1.10.2
              sed -i -e '3s/1\.10\.2/1.10.3-a1/' {package.json,package-lock.json}
              sed -i -e 's/\[\[ PYTHON_VERSION != '\''py27'\'' \]\]/\[ \\"\$PYTHON_VERSION\\" != \\"py27\\" \]/' package.json
              npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/  && cd ..

              git clone https://github.com/plotly/dash-table.git
              cd dash-table && git checkout v4.9.0
              sed -i -e '3s/4\.9\.0/4.9.1-a1/' {package.json,package-lock.json}
              sed -i -e 's/\(^.*_supportsCssVariables.*\)\.some-selector/\1color/' -e 's/\(^.*_activeEdge.*\)--accent/\1--active_edge/' src/core/environment/index.ts
              npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..

              git clone --depth 1 https://github.com/plotly/dash-html-components.git
              cd dash-html-components && npm ci && npm run build && python setup.py sdist && mv dist/* ../packages/ && cd ..

              ls -la packages
      - requires_install_restore_dash_cmd
      - persist_to_workspace:
          root: ~/dash
          paths:
            - packages/*.tar.gz


  lint-unit-37: &lint-unit
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PYVERSION: python37
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - attach_workspace:
          at: ~/dash
      - install_built_packages_cmd
      - run:
          name: 🌸 Python & JS Lint
          command: |
            source venv/bin/activate
            set -eo pipefail
            pip list | grep dash
            npm install --production && npm run initialize
            npm run lint --force
      - run:
          name: 🐍 Python Unit Tests & ☕ JS Unit Tests
          command: |
            source venv/bin/activate
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
            npm run citest.unit


  test-37: &test
    working_directory: ~/dash
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PERCY_PARALLEL_TOTAL: -1
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: True
          PYVERSION: python37
    parallelism: 3
    steps:
      - checkout
      - run: echo $PYVERSION > ver.txt
      - attach_workspace:
          at: ~/dash
      - install_built_packages_cmd
      - run:
          name: 🧪 Run Integration Tests
          command: |
            source venv/bin/activate
            set -eo pipefail
            pip install -e . --no-cache-dir -r requires-install.txt -r requires-dev.txt -r requires-testing.txt --progress-bar off
            npm run citest.integration
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: /tmp/dash_artifacts
      - run:
          name: 🦔 percy finalize
          command: npx percy finalize --all
          when: on_fail


  upload-37:
    working_directory: ~
    docker:
      - image: circleci/python:3.7.6-stretch-node-browsers
        environment:
          PYVERSION: python37
    steps:
      - run: echo $PYVERSION > ver.txt
      - attach_workspace:
          at: ~/dash
      - run:
          name: Upload built packages to noisycomputation repo
          command: |
            echo "This is pipeline number << pipeline.number >>"
            export REPO_URL="github.com/noisycomputation/noisycomputation.github.io.git"
            git clone https://${REPO_URL}

            python -m venv venv && source venv/bin/activate
            pip install -U pip pkginfo

            cd noisycomputation.github.io
            python update_repo.py ~/dash/packages

            git config user.email "noisycomputation@gmail.com"
            git config user.name "noisycomputation"
            commit_title="Repo update from dash CircleCI build no. << pipeline.number >>"
            commit_desc="This job available at ${CIRCLE_BUILD_URL}"
            git add . && git commit -m "${commit_title}" -m "${commit_desc}"

            # redirect all output to null, else an error or update to git binary could
            # expose token in public circleci logs.
            git push -q https://${GITHUB_TOKEN}@${REPO_URL} master > /dev/null 2>&1

            # but check whether git push suceeded or not
            if [ $? -ne 0 ]; then
                echo "git push FAILED"
                exit 1
            else
                echo "git push SUCCEEDED"
            fi


workflows:
  version: 2
  python3.7:
    jobs:
      - build-core-37:
          filters:
            branches:
              only:
                - dev
      - build-misc-37:
          requires:
            - build-core-37
          filters:
            branches:
              only:
                - dev
      - lint-unit-37:
          requires:
            - build-misc-37
          filters:
            branches:
              only:
                - dev
      - test-37:
          requires:
            - build-misc-37
          filters:
            branches:
              only:
                - dev
      - percy-finalize:
          requires:
            - test-37
          filters:
            branches:
              only:
                - dev
      - artifacts:
          requires:
            #- percy-finalize
            - build-misc-37
          filters:
            branches:
              only:
                - dev
      - upload-37:
          requires:
            - lint-unit-37
          filters:
            branches:
              only:
                - dev
